rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Función para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función para verificar si el usuario es admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.rol == 'admin';
    }
    
    // Función para verificar si el usuario es propietario
    function isPropietario() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.rol == 'propietario';
    }
    
    // Función para verificar si el usuario es inquilino
    function isInquilino() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.rol == 'inquilino';
    }

    // Reglas para la colección de usuarios
    match /usuarios/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && 
        (
          request.auth.uid == userId || 
          isAdmin()
        ) && 
        (
          // Permitir actualización de ultimoAcceso
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ultimoAcceso']) ||
          // O permitir actualización de campos específicos del usuario
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['nombre', 'photoURL', 'settings'])
        );
      allow delete: if isAdmin();
    }

    // Reglas para roles pendientes
    match /roles_pendientes/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Reglas para propiedades
    match /propiedades/{propiedadId} {
      allow read: if isAuthenticated() && (isPropietario() || isAdmin() || isInquilino());
      allow write: if isAuthenticated() && (isPropietario() || isAdmin());
    }

    // Reglas para inquilinos
    match /inquilinos/{inquilinoId} {
      allow read: if isAuthenticated() && (isPropietario() || isAdmin());
      allow write: if isAuthenticated() && (isPropietario() || isAdmin());
    }

    // Reglas para contratos
    match /contratos/{contratoId} {
      allow read: if isAuthenticated() && (isPropietario() || isAdmin());
      allow write: if isAuthenticated() && (isPropietario() || isAdmin());
    }

    // Reglas para facturas
    match /facturas/{facturaId} {
      allow read: if isAuthenticated() && (isPropietario() || isAdmin() || isInquilino());
      allow write: if isAuthenticated() && (isPropietario() || isAdmin());
    }

    // Reglas para gastos
    match /gastos/{gastoId} {
      allow read: if isAuthenticated() && (isPropietario() || isAdmin());
      allow write: if isAuthenticated() && (isPropietario() || isAdmin());
    }
  }
}